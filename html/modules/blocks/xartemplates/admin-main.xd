<xar:comment> License: GPL http://www.gnu.org/copyleft/gpl.html </xar:comment>
<xar:set name="relateddocurl">'http://www.xaraya.com/index.php/keywords/blocks/'</xar:set>
<xar:set name="relateddocurltext"><xar:mlstring>Related documentation on Blocks</xar:mlstring></xar:set>
<xar:set name="moduledocurl">'http://www.xaraya.com/index.php/release/13.html'</xar:set>
<xar:set name="moduledocurltext"><xar:mlstring>Blocks Module - Xarigami Extension 13</xar:mlstring></xar:set>

<div class="xar-mod-page">
    <div class="xar-mod-head">
        <xar:if condition="!xarRequestIsAJAX()">
            <xar:template type="module" module="base" file="admin-menu" />
        </xar:if>
    </div>
    <div class="xar-mod-body">
        <h1><xar:mlstring>Overview</xar:mlstring></h1>
        <div class="xar-mod-content">
            <img src="#xarTplGetImage('admin.png','blocks')#" alt="#xarML('official icon')#" width="96" height="96" class="xar-module-icon" />
            <h3><xar:mlstring>What is it?</xar:mlstring></h3>

            <p>
            <xar:mlstring>The Blocks Module controls the configuration, display position and grouping of 'blocks'
            of content or functionality on your website.  From version 1.1.2, the Blocks module also can control access and levels of accessto blocks. The Blocks module is a core module within Xarigami and cannot be removed.</xar:mlstring>
            </p>

            <h2><xar:mlstring>How to use it?</xar:mlstring></h2>

            <h3><xar:mlstring>Block Types</xar:mlstring></h3>
            <p>
                <xar:mlstring>Each module can provide a block type along with the code and templates for it. A block type defines a specific display
                of content or functionality that you can place on your site. For example the Articles module provides a 'featured article' block type,
                and a 'top items' block type. The Base module provides a 'menu' block type, among others.</xar:mlstring>
            </p>
            <p><xar:mlstring>These different block types are installed at the time of module installation, and removed when a module is uninstalled.
                The block types are also upgraded when a module is upgraded.</xar:mlstring>
            </p>
            <p><xar:mlstring>The Blocks module enables you to work with <strong>Block Types</strong> to:</xar:mlstring></p>
               <ul>
                <li><a name="view_types"><xar:mlstring><strong>View Block Types:</strong></xar:mlstring></a><xar:mlstring> lists all the registered block types in your Xarigami installation with reference to which
                    module they belong.</xar:mlstring></li>
                <li><a name="new_type"><xar:mlstring><strong>Add a New Block Type:</strong></xar:mlstring></a>
                    <xar:mlstring>scans a module for a new block type. This option is added mainly for Developer convenience.
                    Sometimes a developer provides a block type or upgrade of a block outside of a normal module release or
                    upgrade. This option allows the block to be loaded and registered in your Xarigami installation. Normally
                    you should never need to use this option in the process of administering your site.</xar:mlstring></li>
              </ul><br />

            <h3><xar:mlstring>Using Blocks and Block Groups</xar:mlstring></h3>
            <p>
                <xar:mlstring>There are a number of steps required to create a new block of content or functionality for your site, and display it:
                </xar:mlstring>
            </p>
            <ol>
                <li><xar:mlstring>Create a new block instance based on any of your installed block types</xar:mlstring></li>
                <li><xar:mlstring>Assign the block instance to an existing block group during block creation or modification (optional)</xar:mlstring></li>
                <li><xar:mlstring>If you need a new block group, create one and then assign the block instance to it</xar:mlstring></li>
                <li><xar:mlstring>Add a <strong>blockgroup tag</strong> in your theme template so Xarigami knows where to display your blocks. eg
                <code>&lt;xar:blockgroup name="right" id="right" /&gt;</code>.</xar:mlstring></li>
            </ol>
             <p>
                <xar:mlstring>Xarigami has pre-configured block groups created at installation time that include <em>right</em>,
                <em>left</em>, <em>center</em>, <em>topnav</em> and <em>header</em> block groups. Special block group tags are used in the default Xarigami theme to
                place and display them and the block instances already assigned to them. In the case of the default block groups
                their name reflects the position where they are located in the default theme. You can rename these block groups as the names are not significant in themselves</xar:mlstring>
            </p>
            <xar:set name="rfcblocklink">'http://xaraya.com/documentation/rfcs/rfc0010.html#block'</xar:set>
            <p><xar:ml>
                <xar:mlstring>Note: you do not have to allocated a block instance to a blockgroup. You can place the block instance display directly
                into your theme templates using a <strong>block</strong> tag. Please check <a href="#(1)">RFC0010</a> for details on using this tag.</xar:mlstring>
               <xar:mlvar>#$rfcblocklink#</xar:mlvar>
               </xar:ml>
            </p>

             <h4><xar:mlstring>Creating and Viewing Block Groups</xar:mlstring></h4>
            <p><xar:mlstring>The Blocks module provides a number of options to work with <strong>Block Goups</strong>:</xar:mlstring></p>
            <ul>
                <li><a name="view_groups"><xar:mlstring><strong>View Block Groups:</strong></xar:mlstring></a><xar:mlstring> displays all the defined Block Groups on your site with links to Edit or Delete options</xar:mlstring></li>
                <li><a name="new_group"><xar:mlstring><strong>Add Block Group:</strong></xar:mlstring> </a><xar:mlstring>  option presents a simple input screen so you can add a new block group</xar:mlstring></li>
             </ul>
              <h4><xar:mlstring>Creating, Viewing  and Modifying Block Instances</xar:mlstring></h4>

              <p>
                  <xar:mlstring>Creating and modifying block instances with Xarigami is simple:</xar:mlstring>
              </p>
              <ul>
                <li><a name="view_instances"><xar:mlstring><strong>View Block Instances:</strong></xar:mlstring> </a><xar:mlstring>  displays all current block instances that are available for use in your Xarigami site. From this menu option
                you can <code>modify</code> or <code>delete</code> any of the listed block instances.</xar:mlstring></li>
                <li><a name="new_instance"><xar:mlstring><strong>Add New Block Instance:</strong></xar:mlstring> </a><xar:mlstring>  Create and make available a new block instance for display on your site. As part of this process you
                may nominate which block type to use for creation of the block instance, and optionally assign the block instance to a Block Group.</xar:mlstring></li>
                <li><a name="modify_instance"><xar:mlstring><strong>Modify a Block Instance:</strong></xar:mlstring> </a><xar:mlstring> from the View Block Instance listing provides the option to allocate the block instance
                  to one or more Block Groups. In addition, you can optionally specify whether the block instances should use an
                  override block instance (inner) template or block group (outer) template (see Templating Blocks and Block Groups). Each module also specifies any special content here that is available for configuration for this specific block type.
                  </xar:mlstring></li>
              </ul>
              <h3><xar:mlstring>Templating Blocks and Block Groups</xar:mlstring></h3>
              <p>
                   <xar:mlstring>As with other Xarigami content, you can provide your own override templates for block
                   instances and create your own templates for block groups. To do this note the following:</xar:mlstring>
              </p>

              <ol>
                  <li><xar:mlstring><strong>Inner template</strong> is used for display of the content in a block instance and
                      supplied by the module that provides the block type. They can be overridden like any other Xarigami template.
                      Overrides for for block instance <strong>inner</strong> templates should be be placed in
                      <code>themes/[yourtheme]/modules/[themodule]/blocks</code> where <code>[themodule]</code> is the module providing
                      the block type. The general name for the template is <code>blocktype-innertemplatename.xt</code></xar:mlstring></li>
                  <li><xar:mlstring><strong> Outer template</strong> is the name given to the template used for the block instance's block group.
                      Some 'outer' templates are installed by default with Xarigami, but you can also create your own 'outer'
                      templates. The <strong>outer templates</strong> are stored in your <code>theme/[yourtheme]/blocks</code>
                      directory. If there is no specific block group template the block group will use the preinstalled 'default'
                      block group template.</xar:mlstring></li>
              </ol>

              <h4><xar:mlstring>How to tell Xarigami which inner and outer templates to use</xar:mlstring></h4>
                <p><xar:mlstring>You can tell Xarigami which inner and outer templates to use when you create a
                    new block instance or modify an existing one. Using the Blocks module, there are two places you can set either the inner
                    template, the outer template or both. </xar:mlstring></p><br />
                <ul>
                    <li><xar:mlstring>The field labelled <strong>Instance Template (optional):</strong> sets the default
                    inner and outer template used for the block instance and any block group. You can specify inner, outer, both inner and outer or none.
                    You use the following format: <code>[outer-template][semi-colon][inner-template]</code>. Both are specified without the file extension.</xar:mlstring></li>
                    <li><xar:mlstring>If you add a block instance to a block group, another input field will appear, labelled with the name of the block group.
                    You can also add a specific inner, outer or both inner and outer template in this field using the same syntax. Specifying
                    an inner or outer template in this block group template field will override any other templates.</xar:mlstring></li>
                 </ul>
                 <p><xar:mlstring><strong>An example:</strong> if you create an articles' featureditems block instance and you are using the System Default (default) theme</xar:mlstring></p>
                    <ul>
                    <li><xar:mlstring>By default, this block instance will use the article module's inner template called <code>featureditems.xd</code> located in modules/articles/xartemplates/blocks</xar:mlstring></li>
                    <li><xar:mlstring>If you have allocated the featured article block instance to a block group called 'right' it will use, by default, the outer template
                        located at <code>themes/default/blocks/right.xt</code>. If the 'right' outer template did not exist it will use one called 'default.xt'
                        in that same directory.</xar:mlstring></li>
                    <li><xar:mlstring>If you wish to override both outer and inner templates for the featureditems block then the syntax example of:
                    <strong>left;weeklyfeature</strong> would mean means the outer template is one created and called <code><strong>left</strong>.xt</code> in the <code>themes/default/blocks</code> directory.
                    The article module's featureditems block instance will be displayed using the <code>themes/default/modules/articles/blocks/featureditems-<strong>weeklyfeature</strong>.xt</code> template.
                    You could just specify outer or inner template if required by adding <code>left;</code> or <code>;weeklyfeature</code> to specify outer and inner respectively.</xar:mlstring></li>
                </ul>
               <br />
               <h3><xar:mlstring>Included Blocks</xar:mlstring></h3>

               <p><xar:mlstring>The Blocks Module has no blocks included at this time.</xar:mlstring></p><br />

               <h3><xar:mlstring>Included Hooks</xar:mlstring></h3>

               <p><xar:mlstring>The Blocks Module has no hooks included at this time.</xar:mlstring></p><br />


              <h3><xar:mlstring>Further Information</xar:mlstring></h3>
              <p>
                  <xar:mlstring>Further information on the Blocks module can be found at</xar:mlstring>
              </p>
              <ul>
                  <li>
                      <xar:ml>
                         <xar:mlstring>Blocks Module Extension page at <a href="#(1)" title="#(2)" >Xarigami Extension and Releases</a>.
                             Click on Version History tab at the bottom to get the latest release information.</xar:mlstring>
                          <xar:mlvar>#$moduledocurl#</xar:mlvar>
                          <xar:mlvar>#$moduledocurltext#</xar:mlvar>
                      </xar:ml>
                  </li>
                  <li>
                      <xar:ml>
                          <xar:mlstring>Related tutorials and documentation on Blocks found at <a href="#(1)" title="#(2)">Xarigami Documentation.</a></xar:mlstring>
                          <xar:mlvar>#$relateddocurl#</xar:mlvar>
                          <xar:mlvar>#$relateddocurltext#</xar:mlvar>
                      </xar:ml>
                  </li>
              </ul>
              <p class="xar-sub">
                 <strong>&nbsp;<xar:mlstring>Blocks Module Overview</xar:mlstring></strong><br />&nbsp;<xar:mlstring>Version</xar:mlstring> 1.1.1&nbsp; 2006-07-20
              </p>
        </div>
    </div>
</div>